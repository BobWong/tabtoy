// Generated by tabtoy
// Version: 2.9.1
// DO NOT EDIT!!
package table

import (
	"fmt"
	"encoding/json"
	"io/ioutil"
)

// Defined in table: Globals
type JobType int32

const (

	//战士
	JobType_Warrior JobType = 0

	//弓箭手
	JobType_Archor JobType = 1

	//法师
	JobType_Mage JobType = 2
)

var (
	JobTypeMapperValueByName = map[string]int32{
		"Warrior": 0,
		"Archor":  1,
		"Mage":    2,
	}

	JobTypeMapperNameByValue = map[int32]string{
		0: "Warrior",
		1: "Archor",
		2: "Mage",
	}
)

func (self JobType) String() string {
	name, _ := JobTypeMapperNameByValue[int32(self)]
	return name
}

// Defined in table: Table
type Table struct {

	//Config
	Config []*ConfigDefine
}

// Defined in table: Config
type ConfigDefine struct {

	//索引ID
	ID int64

	//怪物基础攻击cd时间(ms)
	Value int32
}

// Table 访问接口
type TableTable struct {

	// 表格原始数据
	Table

	// 索引函数表
	indexFuncByName map[string][]func(*TableTable) error

	// 清空函数表
	clearFuncByName map[string][]func(*TableTable) error

	// 加载前回调
	preFuncList []func(*TableTable) error

	// 加载后回调
	postFuncList []func(*TableTable) error

	ConfigByID map[int64]*ConfigDefine
}

// 从json文件加载
func (self *TableTable) Load(filename string) error {

	data, err := ioutil.ReadFile(filename)

	if err != nil {
		return err
	}

	var newTab Table

	// 读取
	err = json.Unmarshal(data, &newTab)
	if err != nil {
		return err
	}

	// 所有加载前的回调
	for _, v := range self.preFuncList {
		if err = v(self); err != nil {
			return err
		}
	}

	// 清除前通知
	for _, list := range self.clearFuncByName {
		for _, v := range list {
			if err = v(self); err != nil {
				return err
			}
		}
	}

	// 复制数据
	self.Table = newTab

	// 生成索引
	for _, list := range self.indexFuncByName {
		for _, v := range list {
			if err = v(self); err != nil {
				return err
			}
		}
	}

	// 所有完成时的回调
	for _, v := range self.postFuncList {
		if err = v(self); err != nil {
			return err
		}
	}

	return nil
}

// 注册外部索引入口, 索引回调, 清空回调
func (self *TableTable) RegisterIndexEntry(name string, indexCallback func(*TableTable) error, clearCallback func(*TableTable) error) {

	indexList, _ := self.indexFuncByName[name]
	clearList, _ := self.clearFuncByName[name]

	if indexCallback != nil {
		indexList = append(indexList, indexCallback)
	}

	if clearCallback != nil {
		clearList = append(clearList, clearCallback)
	}

	self.indexFuncByName[name] = indexList
	self.clearFuncByName[name] = clearList
}

// 注册加载前回调
func (self *TableTable) RegisterPreEntry(callback func(*TableTable) error) {

	self.preFuncList = append(self.preFuncList, callback)
}

// 注册所有完成时回调
func (self *TableTable) RegisterPostEntry(callback func(*TableTable) error) {

	self.postFuncList = append(self.postFuncList, callback)
}

// 创建一个Table表读取实例
func NewTableTable() *TableTable {
	return &TableTable{

		indexFuncByName: map[string][]func(*TableTable) error{

			"Config": {func(tab *TableTable) error {

				// Config
				for _, def := range tab.Config {

					if _, ok := tab.ConfigByID[def.ID]; ok {
						panic(fmt.Sprintf("duplicate index in ConfigByID: %v", def.ID))
					}

					tab.ConfigByID[def.ID] = def

				}

				return nil
			}},
		},

		clearFuncByName: map[string][]func(*TableTable) error{

			"Config": {func(tab *TableTable) error {

				// Config

				tab.ConfigByID = make(map[int64]*ConfigDefine)

				return nil
			}},
		},

		ConfigByID: make(map[int64]*ConfigDefine),
	}
}
