package printer

import (
	"text/template"

	"github.com/davyxu/tabtoy/v2/i18n"
	"github.com/davyxu/tabtoy/v2/model"
)

const gCsharpTemplate = `// Generated by github.com/davyxu/tabtoy
// Version: {{.ToolVersion}}
// DO NOT EDIT!!
using System.Collections.Generic;
using System;

namespace {{.Namespace}}{{$globalIndex:=.Indexes}}{{$verticalFields:=.VerticalFields}}
{
	{{range .Enums}}
		{{if eq .DefinedTable "Globals"}}
	// Defined in table: {{.DefinedTable}}
	public enum {{.Name}}
	{
		{{range .Fields}}	
		{{.Comment}}
		{{.FieldDescriptor.Name}} = {{.FieldDescriptor.EnumValue}}, {{.Alias}}
		{{end}}
	}

	public class {{.Name}}Help
	{
		public static List<{{.Name}}> Read{{.Name}}Array(tabtoy.DataReader reader ,int len )
		{
			int[] temp = reader.ReadInt32Array(len);
			List<{{.Name}}> list= new List<{{.Name}}>();
			for (int i = 0; i < len; i++)
			{
				list.Add(({{.Name}})temp[i]);
			}
			return list;
		}

		public static List<List<{{.Name}}>> Read{{.Name}}Array2(tabtoy.DataReader reader, int len)
        {
            List<List<{{.Name}}>> list = new List<List<{{.Name}}>>();
            for (int i = 0; i < len; i++)
            {
                int subLen = reader.ReadInt32();
                list.Add(Read{{.Name}}Array(reader, subLen));
            }
            return list;
        }
	}

		{{end}}
	{{end}}

	{{range .Classes}} {{if eq .DefinedTable "Globals"}}
	//Defined in table: {{.DefinedTable}}
	public partial class {{.Name}}
	{
		{{range .Fields}}	
		{{.Comment}}
		{{.TypeCode}} {{.Alias}}
		{{end}}

		public static List<{{.Name}}> Read{{.Name}}Array(tabtoy.DataReader reader ,int len,int cnt = 0 ){
			List<{{.Name}}> temp = new List<{{.Name}}>();
            if (cnt != 0)
            {
                len = cnt;
            }
			{{range .Fields}}
			{{.ReadArrayCode}}
			{{end}}
			
			for (int i = 0; i < len; i++)
			{
				{{.Name}} ins = new {{.Name}}();
				{{range .Fields}}
				{{.GetArrayValue}}
				{{end}}
				temp.Add(ins);
			}
			return temp;
		}

		public static List<List<{{.Name}}>> Read{{.Name}}Array2(tabtoy.DataReader reader ,int len ){
            List<List<{{.Name}}>> list= new List<List<{{.Name}}>>();
			var lenArray = reader.ReadInt32Array(len);
			int cnt = 0;
            for (int i = 0; i < lenArray.Length; i ++)
            {
                cnt += lenArray[i];
            }
			if (cnt == 0)
			{
				for (int i = 0; i < len; i++)
				{
					var rowElementList = new List<{{.Name}}>();
                	list.Add(rowElementList);
				} 
			}
			else 
			{
            	var element = Read{{.Name}}Array(reader, len, cnt);
            	var tmpCnt = 0;
				for (int i = 0; i < len; i++)
				{
					var rowElementList = new List<{{.Name}}>();
                	for (int j = 0; j < lenArray[i];j ++)
                	{
                    	if (lenArray[i] == 0)
                    	{
                        	// 空行
                        	tmpCnt++;
                    	} 
                    	else {
                        	rowElementList.Add(element[tmpCnt]);
                        	tmpCnt++;

                    	}
                	}
                	list.Add(rowElementList);
				}
			}
			return list;
		}

	}
		{{end}}
	{{end}}
}
`

type gCsharpPrinter struct {
}

func (self *gCsharpPrinter) Run(g *Globals) *Stream {

	tpl, err := template.New("csharp").Parse(gCsharpTemplate)
	if err != nil {
		log.Errorln(err)
		return nil
	}

	var m csharpFileModel

	if g.PackageName != "" {
		m.Namespace = g.PackageName
	} else {
		m.Namespace = g.FileDescriptor.Pragma.GetString("Package")
	}

	m.ToolVersion = g.Version
	m.GenSerializeCode = g.GenCSSerailizeCode

	// combinestruct的全局索引
	for _, ti := range g.GlobalIndexes {

		// 索引也限制
		if !ti.Index.Parent.File.MatchTag(".cs") {
			continue
		}

		m.Indexes = append(m.Indexes, indexField{TableIndex: ti})
	}

	// 遍历所有类型
	for _, d := range g.FileDescriptor.Descriptors {

		// 这给被限制输出
		if !d.File.MatchTag(".cs") {
			log.Infof("%s: %s", i18n.String(i18n.Printer_IgnoredByOutputTag), d.Name)
			continue
		}

		var sm structModel
		sm.Descriptor = d

		switch d.Kind {
		case model.DescriptorKind_Struct:
			m.Classes = append(m.Classes, &sm)
		case model.DescriptorKind_Enum:
			m.Enums = append(m.Enums, &sm)
		}

		// 遍历字段
		for _, fd := range d.Fields {

			// 对CombineStruct的XXDefine对应的字段
			if d.Usage == model.DescriptorUsage_CombineStruct {

				// 这个字段被限制输出
				if fd.Complex != nil && !fd.Complex.File.MatchTag(".cs") {
					continue
				}

				// 这个结构有索引才创建
				if fd.Complex != nil && len(fd.Complex.Indexes) > 0 {

					// 被索引的结构
					indexedField := csharpField{FieldDescriptor: fd, parentStruct: &sm}

					// 索引字段
					for _, key := range fd.Complex.Indexes {
						indexedField.IndexKeys = append(indexedField.IndexKeys, key)
					}

					sm.IndexedFields = append(sm.IndexedFields, indexedField)
				}

				if fd.Complex != nil && fd.Complex.File.Pragma.GetBool("Vertical") {
					m.VerticalFields = append(m.VerticalFields, csharpField{FieldDescriptor: fd, parentStruct: &sm})
				}

			}

			csField := csharpField{FieldDescriptor: fd, parentStruct: &sm}

			sm.Fields = append(sm.Fields, csField)

		}

	}

	bf := NewStream()

	err = tpl.Execute(bf.Buffer(), &m)
	if err != nil {
		log.Errorln(err)
		return nil
	}

	return bf
}

func init() {

	RegisterPrinter("gcs", &gCsharpPrinter{})

}
