package printer

import (
	"fmt"
	"text/template"

	"strings"

	"github.com/bobwong89757/tabtoy/v2/i18n"
	"github.com/bobwong89757/tabtoy/v2/model"
)

const csharpTemplate = `// Generated by github.com/davyxu/tabtoy
// Version: {{.ToolVersion}}
// DO NOT EDIT!!
using System.Collections.Generic;

namespace {{.Namespace}}{{$globalIndex:=.Indexes}}{{$verticalFields:=.VerticalFields}}
{
	{{range .Enums}} {{if ne .DefinedTable "Globals"}}
	// Defined in table: {{.DefinedTable}}
	public enum {{.Name}}
	{
	{{range .Fields}}	
		{{.Comment}}
		{{.FieldDescriptor.Name}} = {{.FieldDescriptor.EnumValue}}, {{.Alias}}
	{{end}}
	}

	public class {{.Name}}Help
	{
		public static List<{{.Name}}> Read{{.Name}}Array(tabtoy.DataReader reader ,int len )
		{
			int[] temp = reader.ReadInt32Array(len);
			List<{{.Name}}> list= new List<{{.Name}}>();
			for (int i = 0; i < len; i++)
			{
				list.Add(({{.Name}})temp[i]);
			}
			return list;
		}

		public static List<List<{{.Name}}>> Read{{.Name}}Array2(tabtoy.DataReader reader, int len)
        {
            List<List<{{.Name}}>> list = new List<List<{{.Name}}>>();
            for (int i = 0; i < len; i++)
            {
                int subLen = reader.ReadInt32();
                list.Add(Read{{.Name}}Array(reader, subLen));
            }
            return list;
        }
	}


	{{end}}{{end}}
	{{range .Classes}} {{if ne .DefinedTable "Globals"}}

	// Defined in table: {{.DefinedTable}}
	{{.CSClassHeader}}
	public partial class {{.Name}} : Pis.IConfig
	{
		public void JustForCahche() { }
	{{if .IsCombine}}
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	{{end}}
	{{range .Fields}}	
		{{.Comment}}
		{{.TypeCode}} {{.Alias}}
	{{end}}
	{{if .IsTableStruct}}

		public static List<{{.Name}}> Read{{.Name}}Array(tabtoy.DataReader reader ,int len,int cnt = 0 ){
			List<{{.Name}}> temp = new List<{{.Name}}>();
            if (cnt != 0)
            {
                len = cnt;
            }
			{{range .Fields}}
			{{.ReadArrayCode}}
			{{end}}
			
			for (int i = 0; i < len; i++)
			{
				{{.Name}} ins = new {{.Name}}();
				{{range .Fields}}
				{{.GetArrayValue}}
				{{end}}
				temp.Add(ins);
			}
			return temp;
		}

		public static List<List<{{.Name}}>> Read{{.Name}}Array2(tabtoy.DataReader reader ,int len ){
            List<List<{{.Name}}>> list= new List<List<{{.Name}}>>();
			var lenArray = reader.ReadInt32Array(len);
			int cnt = 0;
            for (int i = 0; i < lenArray.Length; i ++)
            {
                cnt += lenArray[i];
            }
			if (cnt == 0)
			{
				for (int i = 0; i < len; i++)
				{
					var rowElementList = new List<{{.Name}}>();
                	list.Add(rowElementList);
				} 
			}
			else 
			{
            	var element = Read{{.Name}}Array(reader, len, cnt);
            	var tmpCnt = 0;
				for (int i = 0; i < len; i++)
				{
					var rowElementList = new List<{{.Name}}>();
                	for (int j = 0; j < lenArray[i];j ++)
                	{
                    	if (lenArray[i] == 0)
                    	{
                        	// 空行
                        	tmpCnt++;
                    	} 
                    	else {
                        	rowElementList.Add(element[tmpCnt]);
                        	tmpCnt++;

                    	}
                	}
                	list.Add(rowElementList);
				}
			}
			return list;
		}

	{{end}}
	{{if .IsCombine}}
		#region Index code
	 	{{range $globalIndex}}Dictionary<{{.IndexType}}, {{.RowType}}> _{{.RowName}}By{{.IndexName}} = new Dictionary<{{.IndexType}}, {{.RowType}}>();
        public {{.RowType}} Get{{.RowName}}By{{.IndexName}}({{.IndexType}} {{.IndexName}}, {{.RowType}} def = default({{.RowType}}))
        {
            {{.RowType}} ret;
            if ( _{{.RowName}}By{{.IndexName}}.TryGetValue( {{.IndexName}}, out ret ) )
            {
                return ret;
            }
			
			if ( def == default({{.RowType}}) )
			{
				TableLogger.ErrorLine("Get{{.RowName}}By{{.IndexName}} failed, {{.IndexName}}: {0}", {{.IndexName}});
			}
            return def;
        }
		{{end}}
	{{range $verticalFields}}
		public {{.StructName}} Get{{.Name}}( )
		{
			return {{.Name}}[0];
		}	
	{{end}}
		#endregion
		#region Deserialize code
		{{range $.Classes}}{{if .IsTableDefine}}
		//{{.DefinedTable}}
		public static {{.TableConfigName}} Deserialize( tabtoy.DataReader reader )
		{
			{{.TableConfigName}} conf = new {{.TableConfigName}}();
			conf.{{.TableDefineName}} = new List<{{.Name}}>();
			int len = reader.ReadInt32();{{range .Fields}}
			{{.SReadCode}}{{end}}

			{{.Name}} temp;
			for (int i = 0; i < len; i++)
			{
				temp = new {{.Name}}();
				conf.{{.TableDefineName}}.Add(temp);															{{range .Fields}} {{if .IsArraySimple }}
				temp.{{.FieldDescriptor.Name}} = new List<{{.ArrayTypeCode}}>({{.FieldDescriptor.Name}}s[i]); 	{{else}}
				temp.{{.FieldDescriptor.Name}} = {{.FieldDescriptor.Name}}s[i];									{{end}} {{if .MakeIndex}}
				conf._{{.GetTableName}}By{{.FieldDescriptor.Name}}.Add(temp.{{.FieldDescriptor.Name}}, temp); 	{{end}}{{end}}
			}
			return conf;
		}{{end}}
		{{end}}
		#endregion
	{{end}}

	} {{end}}{{end}}

}
`

type indexField struct {
	TableIndex
}

func (self indexField) IndexName() string {
	return self.Index.Name
}

func (self indexField) RowType() string {
	return self.Row.Complex.Name
}

func (self indexField) RowName() string {
	return self.Row.Name
}

func (self indexField) IndexType() string {

	switch self.Index.Type {
	case model.FieldType_Int32:
		return "int"
	case model.FieldType_UInt32:
		return "uint"
	case model.FieldType_Int64:
		return "long"
	case model.FieldType_UInt64:
		return "ulong"
	case model.FieldType_String:
		return "string"
	case model.FieldType_Float:
		return "float"
	case model.FieldType_Bool:
		return "bool"
	case model.FieldType_Enum:

		return self.Index.Complex.Name
	default:
		log.Errorf("%s can not be index ", self.Index.String())
	}

	return "unknown"
}

type csharpField struct {
	*model.FieldDescriptor

	IndexKeys []*model.FieldDescriptor

	parentStruct *structModel
}

func (self csharpField) Alias() string {

	v := self.FieldDescriptor.Meta.GetString("Alias")
	if v == "" {
		return ""
	}

	return "// " + v
}

func (self csharpField) MakeIndex() bool {

	v := self.FieldDescriptor.Meta.GetBool("MakeIndex")

	return v
}

func (self csharpField) GetTableName() string {
	return strings.Replace(self.FieldDescriptor.Parent.Name, "Define", "", 1)
}

func (self csharpField) Comment() string {

	if self.FieldDescriptor.Comment == "" {
		return ""
	}

	// zjwps 建议修改
	return "/// <summary> \n		/// " + strings.Replace(self.FieldDescriptor.Comment, "\n", "\n		///", -1) + "\n		/// </summary>"
}

func (self csharpField) SReadCode() string {

	var raw string
	var baseType string
	var readType string
	var hasReadArgs string

	switch self.Type {
	case model.FieldType_Int32:
		raw = "int[]"
		if self.IsRepeated {
			raw = "int[][]"
		}
		baseType = "Int32"
		readType = "reader"
	case model.FieldType_UInt32:
		raw = "uint[]"
		if self.IsRepeated {
			raw = "uint[][]"
		}
		baseType = "UInt32"
		readType = "reader"
	case model.FieldType_Int64:
		raw = "long[]"
		if self.IsRepeated {
			raw = "long[][]"
		}
		baseType = "Int64"
		readType = "reader"
	case model.FieldType_UInt64:
		raw = "ulong[]"
		if self.IsRepeated {
			raw = "ulong[][]"
		}
		baseType = "UInt64"
		readType = "reader"
	case model.FieldType_String:
		raw = "string[]"
		if self.IsRepeated {
			raw = "string[][]"
		}
		baseType = "String"
		readType = "reader"
	case model.FieldType_Float:
		raw = "float[]"
		if self.IsRepeated {
			raw = "float[][]"
		}
		baseType = "Float"
		readType = "reader"
	case model.FieldType_Bool:
		raw = "bool[]"
		if self.IsRepeated {
			raw = "bool[][]"
		}
		baseType = "Bool"
		readType = "reader"
	case model.FieldType_Enum:
		if self.Complex == nil {
			log.Errorln("unknown enum type ", self.Type)
			return "unknown"
		}

		raw = fmt.Sprintf("List<%s>", self.Complex.Name)
		if self.IsRepeated {
			raw = fmt.Sprintf("List<List<%s>>", self.Complex.Name)
		}
		baseType = self.Complex.Name
		readType = fmt.Sprintf("%sHelp", self.Complex.Name)
		hasReadArgs = "reader,"

	case model.FieldType_Struct:
		if self.Complex == nil {
			log.Errorln("unknown struct type ", self.Type, self.FieldDescriptor.Name, self.FieldDescriptor.Parent.Name)
			return "unknown"
		}

		raw = self.Complex.Name
		raw = fmt.Sprintf("List<%s>", self.Complex.Name)
		if self.IsRepeated {
			raw = fmt.Sprintf("List<List<%s>>", self.Complex.Name)
		}
		baseType = self.Complex.Name
		readType = self.Complex.Name
		hasReadArgs = "reader,"
	default:
		raw = "unknown"
	}

	if self.IsRepeated {
		return fmt.Sprintf("%s %ss = %s.Read%sArray2(%slen);", raw, self.Name, readType, baseType, hasReadArgs)
	}

	return fmt.Sprintf("%s %ss = %s.Read%sArray(%slen);", raw, self.Name, readType, baseType, hasReadArgs)
}

func (self csharpField) ReadCode() string {

	var baseType string

	var descHandlerCode string

	var fullTypeName string

	switch self.Type {
	case model.FieldType_Int32:
		baseType = "Int32"
	case model.FieldType_UInt32:
		baseType = "UInt32"
	case model.FieldType_Int64:
		baseType = "Int64"
	case model.FieldType_UInt64:
		baseType = "UInt64"
	case model.FieldType_String:
		baseType = "String"
	case model.FieldType_Float:
		baseType = "Float"
	case model.FieldType_Bool:
		baseType = "Bool"
	case model.FieldType_Enum:

		if self.Complex == nil {
			log.Errorln("unknown enum type ", self.Type)
			return "unknown"
		}

		baseType = fmt.Sprintf("(%s)reader.ReadInt32()", self.Complex.Name)
	case model.FieldType_Struct:
		if self.Complex == nil {
			return "unknown"
		}

		baseType = fmt.Sprintf("Struct<%s>", self.Complex.Name)
		fullTypeName = fmt.Sprintf(", \"%s%s\"", "Data.", self.Complex.Name)
	}

	if self.Type == model.FieldType_Struct {
		descHandlerCode = fmt.Sprintf("%sDeserializeHandler", self.Complex.Name)
	}

	if self.IsRepeated {
		if self.Type == model.FieldType_Enum {
			return fmt.Sprintf("ins.%s.Add (%s);", self.Name, baseType)
		}
		return fmt.Sprintf("ins.%s.Add( reader.Read%s(%s%s) );", self.Name, baseType, descHandlerCode, fullTypeName)
	} else {
		if self.Type == model.FieldType_Enum {
			// log.Infof("enum")
			return fmt.Sprintf("ins.%s = %s ;", self.Name, baseType)
		}

		return fmt.Sprintf("ins.%s = reader.Read%s(%s%s);", self.Name, baseType, descHandlerCode, fullTypeName)
	}

}

func (self csharpField) IsArraySimple() bool {
	if self.Complex == nil && self.IsRepeated {
		return true
	}

	return false
}

func (self csharpField) Tag() string {

	if self.parentStruct.IsCombine() {
		tag := model.MakeTag(int32(model.FieldType_Table), self.Order)

		return fmt.Sprintf("0x%x", tag)
	}

	return fmt.Sprintf("0x%x", self.FieldDescriptor.Tag())
}

func (self csharpField) StructName() string {
	if self.Complex == nil {
		return "[NotComplex]"
	}

	return self.Complex.Name
}

func (self csharpField) IsVerticalStruct() bool {
	if self.FieldDescriptor.Complex == nil {
		return false
	}

	return self.FieldDescriptor.Complex.File.Pragma.GetBool("Vertical")
}

func (self csharpField) ArrayTypeCode() string {

	var raw string

	switch self.Type {
	case model.FieldType_Int32:
		raw = "int"
	case model.FieldType_UInt32:
		raw = "uint"
	case model.FieldType_Int64:
		raw = "long"
	case model.FieldType_UInt64:
		raw = "ulong"
	case model.FieldType_String:
		raw = "string"
	case model.FieldType_Float:
		raw = "float"
	case model.FieldType_Bool:
		raw = "bool"
	default:
		raw = "unknown"
	}
	return raw
}

func (self csharpField) TypeCode() string {

	var raw string

	switch self.Type {
	case model.FieldType_Int32:
		raw = "int"
	case model.FieldType_UInt32:
		raw = "uint"
	case model.FieldType_Int64:
		raw = "long"
	case model.FieldType_UInt64:
		raw = "ulong"
	case model.FieldType_String:
		raw = "string"
	case model.FieldType_Float:
		raw = "float"
	case model.FieldType_Bool:
		raw = "bool"
	case model.FieldType_Enum:
		if self.Complex == nil {
			log.Errorln("unknown enum type ", self.Type)
			return "unknown"
		}

		raw = self.Complex.Name
	case model.FieldType_Struct:
		if self.Complex == nil {
			log.Errorln("unknown struct type ", self.Type, self.FieldDescriptor.Name, self.FieldDescriptor.Parent.Name)
			return "unknown"
		}

		raw = self.Complex.Name

		// 非repeated的结构体
		if !self.IsRepeated {
			return fmt.Sprintf("public %s %s = new %s();", raw, self.Name, raw)
		}

	default:
		raw = "unknown"
	}

	if self.IsRepeated {
		return fmt.Sprintf("public List<%s> %s = new List<%s>();", raw, self.Name, raw)
	}

	return fmt.Sprintf("public %s %s = %s;", raw, self.Name, wrapCSharpDefaultValue(self.FieldDescriptor))
}

func wrapCSharpDefaultValue(fd *model.FieldDescriptor) string {
	switch fd.Type {
	case model.FieldType_Enum:
		return fmt.Sprintf("%s.%s", fd.Complex.Name, fd.DefaultValue())
	case model.FieldType_String:
		return fmt.Sprintf("\"%s\"", fd.DefaultValue())
	case model.FieldType_Float:
		return fmt.Sprintf("%sf", fd.DefaultValue())
	}

	return fd.DefaultValue()
}

type structModel struct {
	*model.Descriptor
	Fields        []csharpField
	IndexedFields []csharpField // 与csharpField.IndexKeys组成树状的索引层次
}

func (self *structModel) CSClassHeader() string {

	// zjwps 提供需求
	return self.File.Pragma.GetString("CSClassHeader")
}

func (self *structModel) DefinedTable() string {
	return self.File.Name
}

func (self *structModel) Name() string {
	return self.Descriptor.Name
}

func (self *structModel) IsTableDefine() bool {
	return strings.Contains(self.Descriptor.Name, "Define")
}

func (self *structModel) TableConfigName() string {
	return strings.Replace(self.Descriptor.Name, "Define", "Config", 1)
}

func (self *structModel) TableDefineName() string {
	return strings.Replace(self.Descriptor.Name, "Define", "", 1)
}

func (self *structModel) IsTableStruct() bool {
	return strings.Contains(self.Descriptor.Name, "Define") == false && strings.Contains(self.Descriptor.Name, "Config") == false
}

func (self *structModel) IsCombine() bool {
	return self.Descriptor.Usage == model.DescriptorUsage_CombineStruct
}

type csharpFileModel struct {
	Namespace   string
	ToolVersion string
	Classes     []*structModel
	Enums       []*structModel
	Indexes     []indexField // 全局的索引

	VerticalFields []csharpField

	GenSerializeCode bool
}

type csharpPrinter struct {
}

func (self *csharpPrinter) Run(g *Globals) *Stream {

	tpl, err := template.New("csharp").Parse(csharpTemplate)
	if err != nil {
		log.Errorln(err)
		return nil
	}

	var m csharpFileModel

	if g.PackageName != "" {
		m.Namespace = g.PackageName
	} else {
		m.Namespace = g.FileDescriptor.Pragma.GetString("Package")
	}

	m.ToolVersion = g.Version
	m.GenSerializeCode = g.GenCSSerailizeCode

	// combinestruct的全局索引
	for _, ti := range g.GlobalIndexes {

		// 索引也限制
		if !ti.Index.Parent.File.MatchTag(".cs") {
			continue
		}

		m.Indexes = append(m.Indexes, indexField{TableIndex: ti})
	}

	// 遍历所有类型
	for _, d := range g.FileDescriptor.Descriptors {

		// 这给被限制输出
		if !d.File.MatchTag(".cs") {
			log.Infof("%s: %s", i18n.String(i18n.Printer_IgnoredByOutputTag), d.Name)
			continue
		}

		var sm structModel
		sm.Descriptor = d

		switch d.Kind {
		case model.DescriptorKind_Struct:
			m.Classes = append(m.Classes, &sm)
		case model.DescriptorKind_Enum:
			m.Enums = append(m.Enums, &sm)
		}

		// 遍历字段
		for _, fd := range d.Fields {

			// 对CombineStruct的XXDefine对应的字段
			if d.Usage == model.DescriptorUsage_CombineStruct {

				// 这个字段被限制输出
				if fd.Complex != nil && !fd.Complex.File.MatchTag(".cs") {
					continue
				}

				// 这个结构有索引才创建
				if fd.Complex != nil && len(fd.Complex.Indexes) > 0 {

					// 被索引的结构
					indexedField := csharpField{FieldDescriptor: fd, parentStruct: &sm}

					// 索引字段
					for _, key := range fd.Complex.Indexes {
						indexedField.IndexKeys = append(indexedField.IndexKeys, key)
					}

					sm.IndexedFields = append(sm.IndexedFields, indexedField)
				}

				if fd.Complex != nil && fd.Complex.File.Pragma.GetBool("Vertical") {
					m.VerticalFields = append(m.VerticalFields, csharpField{FieldDescriptor: fd, parentStruct: &sm})
				}

			}

			csField := csharpField{FieldDescriptor: fd, parentStruct: &sm}

			sm.Fields = append(sm.Fields, csField)

		}

	}

	bf := NewStream()

	err = tpl.Execute(bf.Buffer(), &m)
	if err != nil {
		log.Errorln(err)
		return nil
	}

	return bf
}

func (self csharpField) GetArrayValue() string {
	var baseType string

	var descHandlerCode string

	var fullTypeName string

	switch self.Type {
	case model.FieldType_Int32:
		baseType = "Int32"
	case model.FieldType_UInt32:
		baseType = "UInt32"
	case model.FieldType_Int64:
		baseType = "Int64"
	case model.FieldType_UInt64:
		baseType = "UInt64"
	case model.FieldType_String:
		baseType = "String"
	case model.FieldType_Float:
		baseType = "Float"
	case model.FieldType_Bool:
		baseType = "Bool"
	case model.FieldType_Enum:

		if self.Complex == nil {
			return "unknown"
		}

		baseType = fmt.Sprintf("(%s)reader.ReadInt32()", self.Complex.Name)
	case model.FieldType_Struct:
		if self.Complex == nil {
			return "unknown"
		}

		baseType = fmt.Sprintf("Struct<%s>", self.Complex.Name)
		fullTypeName = fmt.Sprintf(", \"%s%s\"", "Data.", self.Complex.Name)
	}

	if self.Type == model.FieldType_Struct {
		descHandlerCode = fmt.Sprintf("%sDeserializeHandler", self.Complex.Name)
	}

	if self.IsRepeated {
		if self.Type == model.FieldType_Enum {
			return fmt.Sprintf("ins.%s.Add (%s);", self.Name, baseType)
		}
		return fmt.Sprintf("ins.%s.Add( reader.Read%s(%s%s) );", self.Name, baseType, descHandlerCode, fullTypeName)
	} else {
		if self.Type == model.FieldType_Enum {
			log.Infof("enum")
			return fmt.Sprintf("ins.%s = (%s)array%s[i];", self.Name, self.Complex.Name, self.Name)
		}

		return fmt.Sprintf("ins.%s = array%s[i];", self.Name, self.Name)
	}
}

func (self csharpField) ReadArrayCode() string {

	var baseType string

	var descHandlerCode string

	var fullTypeName string

	switch self.Type {
	case model.FieldType_Int32:
		baseType = "Int32"
	case model.FieldType_UInt32:
		baseType = "UInt32"
	case model.FieldType_Int64:
		baseType = "Int64"
	case model.FieldType_UInt64:
		baseType = "UInt64"
	case model.FieldType_String:
		baseType = "String"
	case model.FieldType_Float:
		baseType = "Float"
	case model.FieldType_Bool:
		baseType = "Bool"
	case model.FieldType_Enum:

		if self.Complex == nil {
			return "unknown"
		}

		baseType = fmt.Sprintf("(%s)reader.ReadInt32()", self.Complex.Name)
	case model.FieldType_Struct:
		if self.Complex == nil {
			return "unknown"
		}

		baseType = fmt.Sprintf("Struct<%s>", self.Complex.Name)
		fullTypeName = fmt.Sprintf(", \"%s%s\"", "Data.", self.Complex.Name)
	}

	if self.Type == model.FieldType_Struct {
		descHandlerCode = fmt.Sprintf("%sDeserializeHandler", self.Complex.Name)
	}

	if self.IsRepeated {
		if self.Type == model.FieldType_Enum {
			return fmt.Sprintf("ins.%s.Add (%s);", self.Name, baseType)
		}
		return fmt.Sprintf("ins.%s.Add( reader.Read%s(%s%s) );", self.Name, baseType, descHandlerCode, fullTypeName)
	} else {
		if self.Type == model.FieldType_Enum {
			log.Infof("enum")
			//return fmt.Sprintf("ins.%s = %s ;", self.Name, baseType)
			return fmt.Sprintf("var array%s = reader.ReadInt32Array(len);", self.Name)
		}

		return fmt.Sprintf("var array%s = reader.Read%sArray(len);", self.Name, baseType)
	}

}

func init() {

	RegisterPrinter("cs", &csharpPrinter{})

}
